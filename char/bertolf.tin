#class {bertolf} {open}

#act {{HP:(\d+)/(\d+) \| SP:(\d+)/(\d+) \| STM:(\d+)/(\d+) \| STN:(\d+)\%\((\d+)\) \|(?: SW:)?([\d\.]+)?(?:\% \|)? (\w+) (\w+)}} {
	#var {my[hp][current]}	{%2};
	#var {my[hp][max]}	{%3};
	#var {my[sp][current]}	{%4};
	#var {my[sp][max]}	{%5};
	#var {stm}	{%6};
	#var {stm_max}	{%7};
	#var {stn}	{%8};
	#var {stn_lvl}	{%9};
	#var {sw}	{%10};
	#var {stance}	{%11};
	#var {method}	{%12};

	#if {"$method" == "Standard"} {!method melee};
	#if {$my[hp][current] < $my[hp][max]*.8} {!staunch};
	#if {$my[sp][current] > $my[sp][max]*.9} {
		#if {$stm < 90 || $stn > 10} {
			!will
		}
	};
	#if {$stn > 50 && $coffin_count > 1} {!unwrap;!bury corpse};
	#if {$sw > 99.9} {
		#if {$stm < 10 || $stn > 90} {
			!secondwind
		}
	}
}

#act {^PPD(%1) %2} {
	#var {ppd} {%1};
	#regex {%2} {Stud(%w)} {#var {stud} {&1}} {#unvar stud};
	#regex {%2} {Kick(%w)} {#var {kick} {&1}} {#unvar kick};
	#regex {%2} {Tram(%w)} {#var {tram} {&1}} {#unvar tram};
	#regex {%2} {Endu(%w)} {#var {endu} {&1}} {#unvar endu};
	#regex {%2} {Shie(%w)} {#var {shie} {&1}} {#unvar shie};
	#regex {%2} {Side(%w)} {#var {side} {&1}} {#unvar side};
	#regex {%2} {Defl(%w)} {#var {defl} {&1}} {#unvar defl};
	#regex {%2} {Braw(%w)} {#var {braw} {&1}} {#unvar braw};
	#regex {%2} {Dodg(%w)} {#var {dodg} {&1}} {#unvar dodg};
	#regex {%2} {Parr(%w)} {#var {parr} {&1}} {#unvar parr};
	#if {"$ppd" != "Y"} {!prepare on};
	#if {"$kick" == "n"} {!horse kick};
	#if {"$tram" == "n"} {!horse trample};
	#if {"$side" == "n"} {!horse sidestep};
	#if {"$stud" == "n"} {!study on};
	#if {"$endu" == "n"} {!endure on};
	#if {"$defl" == "n"} {!deflect on};
	#if {"$shie" == "n"} {!shieldblock on};
	#if {"$dodg" == "n"} {!dodge on};
	#if {"$parr" == "n"} {!parry on};
}

#act {{\[GXN:([\d\-]+)\] \[HMN:([\d\.]+)\%\] \[FSN:([\d\.]+)\%\] \[OFN:([\d\.]+)\%\] \[DFN:([\d\.]+)\%\] \[LF:(\d+)\] \[MOB:([\w\s\d]+)\%?\]}} {
	#var {gxn_prev} {$gxn};
	#var {gxn} {%2};
	#var {hmn} {%3};
	#var {fsn} {%4};
	#var {ofn} {%5};
	#var {dfn} {%6};
	#var {lf} {%7};
	#var {ehealth} {%8};
	#if {"$cooler" == "on" || $cooler_count > 0} {
		#format {sb1_cooler} {%+2s} {$cooler_count};
		#var {sb1_cooler} { CL:<130>$sb1_cooler<088>}
	} {
		#var {sb1_cooler} {}
	};
	#if {"$freezer" == "on" || $freezer_count > 0} {
		#format {sb2_freezer} {%+2s} {$freezer_count};
		#var {sb2_freezer} { FZ<130>$sb2_freezer<088>}
	} {
		#var {sb2_freezer} {}
	};
	#format {ehealth_label} {%+6s} {$ehealth};
	#if {$ehealth > 0} {
		#var {ehealth_label} {$ehealth_label%%}
	} {
		#format {ehealth_label} {%-10s} {$ehealth};
		#var {ehealth_label} {$ehealth_label}
	};
	#math {gxn_last} {$gxn_prev - $gxn};
	#math {gxn_earned} {$gxn_max - $gxn};
	#if {!&{gxn_max}} {gs};
	#if {$gxn_last > 0} {#math {gxn_rnds} {$gxn/$gxn_last+1}};
	#math {gxn_day} {$gxn_rnds/43200};
	#math {gxn_hr} {$gxn_rnds/1800};
	#math {gxn_min} {$gxn_rnds % 1800/30};
	#if {$gxn_day > 0} {
		#var {gxn_time} {<120>${gxn_day}<020>d <120>${gxn_hr}<020>h<088>}
	}; #elseif {$gxn_hr > 0} {
		#var {gxn_time} {<120>${gxn_hr}<020>h <120>${gxn_min}<020>m<088>}
	}; #elseif {$gxn_min > 0} {
		#var {gxn_time} {<120>${gxn_min}<020>m<088>}
	}; #else {
		#var {gxn_time} {<120>0<020>m<088>}
	}
	#var {my[hp][graph]} {@graph{$my[hp][current];$my[hp][max]}};
	#var {my[sp][graph]} {@graph{$my[sp][current];$my[sp][max]}};
	#var {stm_graph} {@graph{$stm;$stm_max}};
	#var {stn_graph} {@graph{$stn;100}};
	#var {gxn_graph} {@graph{$gxn_earned;$gxn_max}};
	#var {e_graph} {@graph{$ehealth;100}};
	#format {hp} {%+4s} {$my[hp][current]};
	#format {hp_max} {%+4s} {$my[hp][max]};
	#format {sp} {%+4s} {$my[sp][current]};
	#format {sp_max} {%+4s} {$my[sp][max]};
	#format {stm} {%+4s} {$stm};
	#format {stm_max} {%+4s} {$stm_max};
	#format {gxn} {%+6s} {${gxn}};
	#format {gxn_last} {%+2s} {$gxn_last};
	#format {gxn_time} {%+10s} {$gxn_time};
	#format {ehealth} {%-10s} {$ehealth};
	#showme {HP:${hp}/${hp_max} SP:${sp}/${sp_max} STM:${stm}/${stm_max}  GXP: ${gxn}(${gxn_last})${gxn_time}   E:${ehealth_label} IC:<130>${inv_count}<088>${sb1_cooler}} {3};
	#showme {H:${my[hp][graph]} S:${my[sp][graph]} STM:${stm_graph} STN:${stn_graph} G:${gxn_graph} E:${e_graph} CF:<130>${coffin_count}<088>${sb2_freezer}} {2}
}

#act {{GXP: (?:[\d\,\s]+) Needed: (?:[\d\,\-]+) (?:\s+)\[\{(?:.*)\}\] ([\d\.]+)\%}} {
	#var {gxn_per} {%2};
	#format {gxn_per} {%.5s} {$gxn_per};
	#math {gxn_max} {$gxn/(1-(${gxn_per}/100))}
}

#act {^{\w*} dealt the killing blow to} {corpsetrig}
#alias corpsetrig {
	#if {$stm < $stm_max*.25 || $stn > 75} {
		.pause
	};
	!rest;
	!wrap;
	!bury corpse;
	!get coins;
	!get component;
	!pet bela
}


/* Aliases */
#alias {remount} {
        !callesquire;
        !esq fetch mount;
        !mount bela;
        !send away
}

#alias gs2 !skills
#alias gs3 !gkills
#alias info !knight

#alias us {!unwrap;!bury corpse}

/* Joust */
#act {^You accept the challenge and you find yourself mounted on a horse with a lance.$} {mapgo jousts;#var {joust_dir} {n}}
#act {%w accepts your challenge.  You find yourself mounted on a horse with a lance.$} {mapgo joustn;#var {joust_dir} {n}}
#act {^Congratulations!  You've dismounted %w!  You move on to your next challenge...$} {mapgo challengeknight}
#act { %w has knocked you from your horse!$} {#map go 1974;mount bela}

#act {^You start the joust.$} {
	#if {"$joust_dir" == "n"} {
		mapgo joustn;
		#var {joust_dir} {s};
		s
	} {
		mapgo jousts;
		#var {joust_dir} {n};
		n
	}
}

#act {^It is your move.$} {
	#math {rand} {1d2};
	#map get {roomexits} {exits};


	#if {"$joust_dir" == "s"} {
		#regex {$exits} {s} {
			#switch {$rand} {
				#case {1} {s};
				#case {2} {#regex {$exits} {sw} {sw} {se}}
			}
		} {
			!start
		}
	} {
		#regex {$exits} {n} {
			#switch {$rand} {
				#case {1} {n};
				#case {2} {#regex {$exits} {nw} {nw} {ne}}
			}
		}
	}
}

#class {bertolf} {close}
